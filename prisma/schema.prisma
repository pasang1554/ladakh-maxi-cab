// This is your Prisma schema file for MongoDB
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id")
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      String   @default("user") // user, admin
  isVerified Boolean @default(false)
  resetToken String?
  resetTokenExpiry DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[] @relation(fields: [id], references: [userId])
  contacts Contact[] @relation(fields: [id], references: [userId])
}

model Contact {
  id        String   @id @default(auto()) @map("_id")
  name      String
  email     String
  phone     String
  message   String
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User?    @relation(fields: [userId], references: [id])
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id")
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id        String   @id @default(auto()) @map("_id")
  title     String
  slug      String   @unique
  excerpt   String
  content   String
  image     String
  author    String
  date      DateTime
  readTime  String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @default(auto()) @map("_id")
  title       String
  description String
  image       String
  price       Float
  category    String   // bike, car, homestay, food, trekking, tours
  isAvailable Boolean  @default(true)
  features    String   // JSON string of features array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[] @relation(fields: [id], references: [serviceId])
}

model Booking {
  id        String   @id @default(auto()) @map("_id")
  serviceId String
  userId    String
  name      String
  email     String
  phone     String
  date      DateTime
  endDate   DateTime?
  message   String?
  status    String   @default("pending") // pending, confirmed, cancelled, completed
  totalAmount Float
  paymentStatus String @default("pending") // pending, paid, refunded
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User?     @relation(fields: [userId], references: [id])
  service   Service?  @relation(fields: [serviceId], references: [id])
} 